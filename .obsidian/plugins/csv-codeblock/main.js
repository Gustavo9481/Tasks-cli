/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CsvCodeBlockPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CsvCodeBlockPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("csv", (source, el, ctx) => {
      const rows = source.split("\n").filter((row) => row.length > 0);
      const table = el.createEl("table");
      const body = table.createEl("tbody");
      for (let i = 0; i < rows.length; i++) {
        const cols = rows[i].split(",");
        const row = body.createEl("tr");
        for (let j = 0; j < cols.length; j++) {
          row.createEl("td", { text: cols[j] });
        }
      }
    });
    this.registerMarkdownCodeBlockProcessor("tsv", (source, el, ctx) => {
      const rows = source.split("\n").filter((row) => row.length > 0);
      const table = el.createEl("table");
      const body = table.createEl("tbody");
      for (let i = 0; i < rows.length; i++) {
        const cols = rows[i].split("	");
        const row = body.createEl("tr");
        for (let j = 0; j < cols.length; j++) {
          row.createEl("td", { text: cols[j] });
        }
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2lufSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG4vLyBzdG9sZSBjb2RlIGZyb20gaHR0cHM6Ly9kb2NzLm9ic2lkaWFuLm1kL1BsdWdpbnMvRWRpdG9yL01hcmtkb3duK3Bvc3QrcHJvY2Vzc2luZyNQb3N0LXByb2Nlc3MrTWFya2Rvd24rY29kZStibG9ja3NcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENzdkNvZGVCbG9ja1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0XHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFwiY3N2XCIsIChzb3VyY2UsIGVsLCBjdHgpID0+IHtcclxuXHRcdFx0Y29uc3Qgcm93cyA9IHNvdXJjZS5zcGxpdChcIlxcblwiKS5maWx0ZXIoKHJvdykgPT4gcm93Lmxlbmd0aCA+IDApO1xyXG5cclxuXHRcdFx0Y29uc3QgdGFibGUgPSBlbC5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cdFx0XHRjb25zdCBib2R5ID0gdGFibGUuY3JlYXRlRWwoXCJ0Ym9keVwiKTtcclxuXHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGNvbnN0IGNvbHMgPSByb3dzW2ldLnNwbGl0KFwiLFwiKTtcclxuXHJcblx0XHRcdFx0Y29uc3Qgcm93ID0gYm9keS5jcmVhdGVFbChcInRyXCIpO1xyXG5cclxuXHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdHJvdy5jcmVhdGVFbChcInRkXCIsIHsgdGV4dDogY29sc1tqXSB9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xuXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFwidHN2XCIsIChzb3VyY2UsIGVsLCBjdHgpID0+IHtcclxuXHRcdFx0Y29uc3Qgcm93cyA9IHNvdXJjZS5zcGxpdChcIlxcblwiKS5maWx0ZXIoKHJvdykgPT4gcm93Lmxlbmd0aCA+IDApO1xyXG5cclxuXHRcdFx0Y29uc3QgdGFibGUgPSBlbC5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cdFx0XHRjb25zdCBib2R5ID0gdGFibGUuY3JlYXRlRWwoXCJ0Ym9keVwiKTtcclxuXHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGNvbnN0IGNvbHMgPSByb3dzW2ldLnNwbGl0KFwiXFx1MDAwOVwiKTtcclxuXHJcblx0XHRcdFx0Y29uc3Qgcm93ID0gYm9keS5jcmVhdGVFbChcInRyXCIpO1xyXG5cclxuXHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGNvbHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdHJvdy5jcmVhdGVFbChcInRkXCIsIHsgdGV4dDogY29sc1tqXSB9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cdFxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBc0I7QUFJdEIsSUFBcUIscUJBQXJCLGNBQWdELHVCQUFPO0FBQUEsRUFFdEQsTUFBTSxTQUFTO0FBQ2QsU0FBSyxtQ0FBbUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxRQUFRO0FBQ25FLFlBQU0sT0FBTyxPQUFPLE1BQU0sSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDO0FBRTlELFlBQU0sUUFBUSxHQUFHLFNBQVMsT0FBTztBQUNqQyxZQUFNLE9BQU8sTUFBTSxTQUFTLE9BQU87QUFFbkMsZUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLFFBQVEsS0FBSztBQUNyQyxjQUFNLE9BQU8sS0FBSyxDQUFDLEVBQUUsTUFBTSxHQUFHO0FBRTlCLGNBQU0sTUFBTSxLQUFLLFNBQVMsSUFBSTtBQUU5QixpQkFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLFFBQVEsS0FBSztBQUNyQyxjQUFJLFNBQVMsTUFBTSxFQUFFLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUFBLFFBQ3JDO0FBQUEsTUFDRDtBQUFBLElBQ0QsQ0FBQztBQUVELFNBQUssbUNBQW1DLE9BQU8sQ0FBQyxRQUFRLElBQUksUUFBUTtBQUNuRSxZQUFNLE9BQU8sT0FBTyxNQUFNLElBQUksRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQztBQUU5RCxZQUFNLFFBQVEsR0FBRyxTQUFTLE9BQU87QUFDakMsWUFBTSxPQUFPLE1BQU0sU0FBUyxPQUFPO0FBRW5DLGVBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLEtBQUs7QUFDckMsY0FBTSxPQUFPLEtBQUssQ0FBQyxFQUFFLE1BQU0sR0FBUTtBQUVuQyxjQUFNLE1BQU0sS0FBSyxTQUFTLElBQUk7QUFFOUIsaUJBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLEtBQUs7QUFDckMsY0FBSSxTQUFTLE1BQU0sRUFBRSxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFBQSxRQUNyQztBQUFBLE1BQ0Q7QUFBQSxJQUNELENBQUM7QUFBQSxFQUNGO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
